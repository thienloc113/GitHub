?set.seed
# Loading libraries
library(tidyverse)
library(ggplot2)
# Set seed and other parameters for reproducability later
set.seed(31)
lamda <- 0.2
n <- 40
# Simulation
sim_exp <- replicate(1000, rexp(n, lamda))
View(sim_exp)
rexp(n, lamda)
dim(sim_exp)
means_exponentials <- apply(simulated_exponentials, 2, mean)
means_exponentials <- apply(sim_exp, 2, mean)
?apply
# Question 1
# Show where the distribution is centered at and compare it to the theoretical center of the distribution.
# Sample Mean versus Theoretical Mean
sam_mean <- apply(sim_exp, 2, mean)
# Loading libraries
library(tidyverse)
library(ggplot2)
# Set seed and other parameters for reproducability later
set.seed(11)
lamda <- 0.2
n <- 40
# Simulation
sim_exp <- replicate(1000, rexp(n, lamda))
# Question 1
# Show where the distribution is centered at and compare it to the theoretical center of the distribution.
# Sample Mean versus Theoretical Mean
each_mean <- apply(sim_exp, 2, mean)
sam_mean <- mean(each_mean)
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean)) +
geom_vline(aes(xintercept = 1 / 0.2),col =
'red')
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins= 30) +
geom_vline(aes(xintercept = 1 / 0.2),col =
'red')
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15) +
geom_vline(aes(xintercept = 1 / 0.2),col =
'red')
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15) +
geom_vline(aes(xintercept = 1 / 0.2),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
theory_mean <- 1/lambda
theory_mean
lambda <- 0.2
theory_mean <- 1/lambda
theory_mean
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15) +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, fill = "null") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, fill = "white") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, fill="transparent") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, fill="transparent"
, color="black") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, alpha = 0.5
, color="black") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, alpha = 0.5
, color="black") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue") +
labs(x = "Means")
## Show in figure
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, alpha = 0.5
, color="black") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue") +
labs(x = "Means", y = "Frequency", title = "Exponential Function Simulations")
# Question 2
# Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
each_sd <- apply(sim_exp, 2, sd)
each_var <- each_sd^2
# Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
# variance of distribution
stan_sd_dist <- sd(each_mean, 2, sd)
var_dist <- stan_sd_dist^2
var_dist
# theoretical variance of the distribution
var_theory <- ((1/lambda)*(1/sqrt(n)))^2
# Question 2
# Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
# variance of distribution
stan_sd_dist <- sd(each_mean, 2, sd)
# Question 2
# Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
# variance of distribution
stan_sd_dist <- sd(each_mean)
var_dist <- stan_sd_dist^2
var_dist
# theoretical variance of the distribution
var_theory <- ((1/lambda)*(1/sqrt(n)))^2
var_theory
ggplot() + geom_histogram(aes(x = each_mean), bins = 40, alpha = 0.5
, color="black")
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean), bins = 40, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = sqrt(var_theory)))
df <- data.frame(PF = 10*rnorm(1000))
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$PF), sd = sd(df$PF)))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean), bins = 40, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1))
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$PF), sd = sd(df$PF)))
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = 1, sd = sd(df$PF)))
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = sd(df$PF)))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean), bins = 40, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = var_theory))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = var_theory))
# Question 3
# Show that the distribution is approximately normal.
ggplot(each_mean) + geom_histogram(aes(x = each_mean), bins = 40, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = var_theory))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = var_theory))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5
, color="black") +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = var_theory))
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist)
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5
color="black") +
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5, color="black") +
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist))
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 30, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist))
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), color = "red")
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), color = "yellow")
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), color = "blue")
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), color = "blue", size = 2)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40, alpha = 0.5, color="black") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), color = "blue", size = 1)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40,
alpha = 0.5, color="black", fill = "orange") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), color = "blue", size = 1)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40,
alpha = 0.5, color="black", fill = "orange") +
stat_function(fun = dnorm, args = list(mean = sam_mean, sd = stan_sd_dist), size = 1)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40,
alpha = 0.5, color="black", fill = "orange") +
stat_function(fun = dnorm, args = list(mean = sam_mean,
sd = stan_sd_dist), size = 1, lty = 5)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40,
alpha = 0.5, color="black", fill = "orange") +
stat_function(fun = dnorm, args = list(mean = sam_mean,
sd = stan_sd_dist), size = 0.8, lty = 5)
# Question 3
# Show that the distribution is approximately normal.
ggplot() + geom_histogram(aes(x = each_mean, y = ..density..), bins = 40,
alpha = 0.5, color="black", fill = "orange") +
stat_function(fun = dnorm, args = list(mean = sam_mean,
sd = stan_sd_dist), size = 0.8, lty = 5) +
labs(x= "Means", y = "Density", title = "Density of Mean")
qqnorm(means_exponentials)
qqline(means_exponentials, col = 2)
qqline(each_mean, col = 2)
# compare the distribution of averages of 40 exponentials to a normal distribution
qqnorm(each_mean)
qqline(each_mean, col = 2)
qqline(each_mean, col = 3)
qqline(each_mean, col = 1)
qqline(each_mean, col = 10)
qqline(each_mean, col = 3)
qqline(each_mean, col = 3, size = 1)
?qqline
qqline(each_mean, col = 3)
# Loading libraries
library(tidyverse)
library(ggplot2)
library(datasets)
data(ToothGrowth)
toothGrowth <- ToothGrowth
# Loading libraries
library(tidyverse)
library(ggplot2)
library(datasets)
data(ToothGrowth)
toothGrowth <- ToothGrowth
# Loading libraries
library(tidyverse)
library(ggplot2)
library(datasets)
data(ToothGrowth)
toothGrowth <- ToothGrowth
# Loading libraries
library(tidyverse)
library(ggplot2)
library(datasets)
data(ToothGrowth)
force(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
# Exploratory Data Analysis
# Number of observations for each treatment/experiment. Total guinea pigs = 60:
table(toothGrowth$supp, toothGrowth$dose)
# Exploratory Data Analysis
# Number of observations for each treatment/experiment. Total guinea pigs = 60:
table(ToothGrowth$supp, toothGrowth$dose)
# Exploratory Data Analysis
# Number of observations for each treatment/experiment. Total guinea pigs = 60:
table(ToothGrowth$supp, ToothGrowth$dose)
View(ToothGrowth)
#Figures
ggplot(data=ToothGrowth, aes(x=dose,y=len,fill=dose)) +
geom_boxplot() +
facet_grid(.~supp) +
ggtitle("Tooth Length by Suplement Type and Dose (in milligrams/day.)")
View(ToothGrowth)
str(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=dose,y=len,fill=dose))
ggplot(data=ToothGrowth, aes(x=dose,y=len,fill=dose)) +
geom_boxplot()
ggplot(data=ToothGrowth, aes(x= supp, y = len,fill = supp)) +
geom_boxplot()
ggplot(data=ToothGrowth, aes(x= supp, y = len,fill = supp)) +
geom_boxplot() +
facet_grid(.~dose) +
ggtitle("Tooth Length by Suplement Type and Dose (in milligrams/day.)")
#Figures
ggplot(data=ToothGrowth, aes(x= supp, y = len,fill = supp)) +
geom_boxplot() +
facet_grid(.~dose) +
ggtitle("Tooth Length by Dose (in milligrams/day.) and Suplement Type")
table(ToothGrowth$supp, ToothGrowth$dose)
str(ToothGrowth)
summary(ToothGrowth)
#3. Use confidence intervals and/or hypothesis tests to compare tooth growth by supp and dose
#The data contains: tooth length, supplement, and supplement dose for a group of guinea pigs. Presumably the data was not collected in a pairwise fashion. Performing T Test for each subset of data separated by dosages
# Assumptions
#Samples are both unpaired and unequal variances
# The sample population distribution is mound shaped and not skewed
d.5 <- filter(ToothGrowth, dose = 0.5)
#3. Use confidence intervals and/or hypothesis tests to compare tooth growth by supp and dose
#The data contains: tooth length, supplement, and supplement dose for a group of guinea pigs. Presumably the data was not collected in a pairwise fashion. Performing T Test for each subset of data separated by dosages
# Assumptions
#Samples are both unpaired and unequal variances
# The sample population distribution is mound shaped and not skewed
d.5 <- filter(ToothGrowth, dose == 0.5)
View(d.5)
d2 <- filter(ToothGrowth, dose == 2)
d1 <- filter(ToothGrowth, dose == 1)
# Test for dosage = 0.5
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=lowest.dose)
# Test for dosage = 0.5
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d.5)
# Test for dosage = 1
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = d1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
set.seed(11)
lambda <- 0.2
n <- 40
sim_exp <- replicate(1000, rexp(n, lambda))
each_mean <- apply(sim_exp, 2, mean)
sam_mean <- mean(each_mean)
sam_mean
theory_mean <- 1/lambda
theory_mean
ggplot() + geom_histogram(aes(x = each_mean), bins = 15, alpha = 0.5
, color="black") +
geom_vline(aes(xintercept = theory_mean),col = 'red') +
geom_vline(aes(xintercept = sam_mean), col = "blue") +
labs(x = "Means", y = "Frequency", title = "Exponential Function Simulations")
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(tidyverse)
library(ggplot2)
---
title: "Tooth Growth Data Analysis"
author: "Loc Nguyen"
date: "9/24/2021"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Overview
- Load the ToothGrowth data and perform some basic exploratory data analyses
- Analyze the ToothGrowth data by summary, visualization, statistics,...
## Loading libraries
Loading necessary libraries for the report
```{r libraries, results='hide', warning=FALSE,message=FALSE}
library(tidyverse)
library(ggplot2)
library(datasets)
```
## Load the ToothGrowth data and perform some basic exploratory data analyses
### Load data
```{r load data}
data(ToothGrowth)
head(ToothGrowth)
```
### Perform some basic exploratory data analyses
Comparing the data sets. Some plots to explore data
```{r exploratory data}
ggplot(data=ToothGrowth, aes(x= supp, y = len,fill = supp)) +
geom_boxplot() +
facet_grid(.~dose) +
ggtitle("Tooth Length by Dose (in milligrams/day) and Suplement Type")
```
## Provide a basic summary of the data.
Number of observations for each treatment/experiment. Total guinea pigs = 60
```{r table}
table(ToothGrowth$supp, ToothGrowth$dose)
```
Summarize data
```{r summary}
str(ToothGrowth)
summary(ToothGrowth)
```
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*(x-mean(x)))
x-mean(x)
sum(w*(x-mean(x))^2)
(x-mean(x))^2
a <- (x-mean(x))^2
sum(wa)
sum(w*a)
w*a
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
View(subdata)
y
group
sample(group)
sample(group)
group
group
sample(group)
sample(group)
sample(group)
library(MASS)
data(shuttle)
fit <- glm(use ~ wind, family='binomial', shuttle)
round(exp(fit$coeff)[2],3)
fit$coeff
exp(fit$coeff)
shuttle
Views(shuttle)
View(shuttle)
fit2 <- glm(use ~ wind + magn, family='binomial', shuttle)
fit2
round(exp(fit2$coeff)[2],3)
shuttle2 <- shuttle
shuttle2$use <- relevel(shuttle2$use,"noauto")
View(shuttle2)
data(InsectSprays)
fit <- glm(count ~ spray, data=InsectSprays, family=poisson)
fit
